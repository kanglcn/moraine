# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/pu.ipynb.

# %% auto 0
__all__ = ['gamma_mcf_pt']

# %% ../nbs/API/pu.ipynb 3
import math
import numpy as np
import tempfile
from pathlib import Path
import moraine as mr

# %% ../nbs/API/pu.ipynb 4
def gamma_mcf_pt(
    pc_x:np.ndarray, # x coordinate, shape of (N,)
    pc_y:np.ndarray, # y coordinate, shape of (N,)
    ph:np.ndarray, # wrapped phase, shape of (N,)
    ph_weight:np.ndarray=None, # point weight, shape of (N,), optional
    ref_point:int=1, # reference point, the first point by default
) -> np.ndarray: # unwrapped phase, shape of (N,)
    pc_x = pc_x.astype(np.int32)
    pc_y = pc_y.astype(np.int32)
    pc_xy = np.stack((pc_x,pc_y),axis=-1)
    ph = ph.astype(np.complex64)
    if ph_weight is not None: ph_weight = ph_weight.astype(np.float32)

    with tempfile.TemporaryDirectory() as tmpdir_str:
        tmp_path = Path(tmpdir_str)
        pt_path = temp_dir/'pt'
        ph_path = temp_dir/'ph'
        unwrap_ph_path = temp_dir/'unwrap_ph'
        mr.write_gamma
        pg.write_point_list(pt_g(ptx,pty),pt_path,dtype='int')
        pg.write_point_data(ph,pt_path,ph_path,dtype='fcomplex')
        if ph_weight is None:
            ph_weight_path = '-'
        else:
            ph_weight_path = temp_dir/'ph_weight'
            ph_wieght = ph_weight.astype(np.float32)
            pg.write_point_data(ph_weight,pt_path,ph_weight_path,dtype='float')

        pg.mcf_pt(pt_path,'-',ph_path,'-',ph_weight_path,'-',unwrap_ph_path,xps,yps,ref_point,1)

        unwrap_ph = pg.read_point_data(unwrap_ph_path,pt_path,dtype='float')

