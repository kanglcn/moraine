# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/CLI/pu.ipynb.

# %% auto 0
__all__ = ['gamma_mcf_pt']

# %% ../../nbs/CLI/pu.ipynb 5
import logging
import zarr
import time
import numpy as np

import dask
from dask import array as da
from dask import delayed
from dask.distributed import Client, LocalCluster, progress
import moraine as mr
from .logging import mc_logger
from . import dask_from_zarr, dask_to_zarr, parallel_read_zarr

# %% ../../nbs/CLI/pu.ipynb 6
@mc_logger
def gamma_mcf_pt(
    pc_x:str, # x coordinate, shape of (N,)
    pc_y:str, # y coordinate, shape of (N,)
    ph:str, # stack of wrapped phase, shape of (N,M)
    unw_ph:str, # output, unwrapped phase, shape of (N,L)
    image_pairs:np.ndarray,# image pairs to construct interferograms for unwrapping
    ref_point:int=1, # reference point, the first point by default
    out_chunks:int=None, # unw_ph point cloud chunk size, same as ph by default
    n_workers=1, # number of dask worker, number of interferograms to be unwrapped in the same time
    threads_per_worker=2, # number of threads per dask worker
    **dask_cluster_arg, # other dask local/cudalocal cluster args
):
    '''A wrapper for mcf_pt in GAMMA software.'''
    
    logger = logging.getLogger(__name__)
    logger.info('load coordinates')
    pc_x_data = parallel_read_zarr(zarr.open(pc_x,'r'),(slice(None),))
    pc_y_data = parallel_read_zarr(zarr.open(pc_y,'r'),(slice(None),))
    logger.info('Done')

    ph_path = ph
    unw_ph_path = unw_ph

    ph_zarr = zarr.open(ph_path,mode='r')
    logger.zarr_info(ph_path,ph_zarr)
    npoint, nimage = ph_zarr.shape
    nimage_pairs = image_pairs.shape[0]
    
    if out_chunks is None: out_chunks = ph_zarr.chunks[0]

    Cluster = LocalCluster; cluster_args = {'processes':True, 'n_workers':n_workers, 'threads_per_worker':threads_per_worker}
    cluster_args.update(dask_cluster_arg)
    
    logger.info('starting dask local cluster.')
    with Cluster(**cluster_args) as cluster, Client(cluster) as client:
        logger.info('dask local cluster started.')
        logger.dask_cluster_info(cluster)
        

        ph = dask_from_zarr(ph_path,chunks=(ph_zarr.shape[0],1))
        logger.darr_info('ph', ph)

        pc_x = da.from_array(pc_x_data,chunks=pc_x_data.shape)
        pc_y = da.from_array(pc_y_data,chunks=pc_y_data.shape)

        logger.info(f'phase wrapping with mcf.')
    
        pc_x_delayed = pc_x.to_delayed()[0]
        pc_y_delayed = pc_y.to_delayed()[0]
        ph_delayed = ph.to_delayed()[0]

        unw_ph_delayed = np.empty((1,nimage_pairs),dtype=object)
        f_mcf_delayed = delayed(mr.gamma_mcf_pt,pure=True,nout=1)
        f_intf_delayed = delayed(mr.intf,pure=True,nout=1)
        for i, (ref, sec) in enumerate(image_pairs):
            intf_delayed = f_intf_delayed(ph_delayed[ref],ph_delayed[sec])
            unw_ph_delayed[0,i] = f_mcf_delayed(pc_x_delayed, pc_y_delayed, intf_delayed)
            unw_ph_delayed[0,i] = da.from_delayed(unw_ph_delayed[0,i],shape=(npoint,1),meta=np.array((),dtype=np.float32))
        unw_ph = da.block(unw_ph_delayed.tolist())

        logger.info('got unwrapped phase.')
        logger.darr_info('unw_ph', unw_ph)
        logger.info('save unw_ph')
        _unw_ph = dask_to_zarr(unw_ph, unw_ph_path,chunks=(out_chunks,1))
        
        logger.info('computing graph setted. doing all the computing.')
        futures = client.persist(_unw_ph)
        progress(futures,notebook=False)
        time.sleep(0.1)
        da.compute(futures)
        logger.info('computing finished.')
    logger.info('dask cluster closed.')
